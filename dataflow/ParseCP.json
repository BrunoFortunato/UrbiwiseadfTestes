{
	"name": "ParseCP",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SqlServerTable2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          status as string,",
				"          createdDateTime as string,",
				"          lastUpdatedDateTime as string,",
				"          analyzeResult as (apiVersion as string, modelId as string, stringIndexType as string, content as string, pages as (pageNumber as integer, angle as integer, width as double, height as double, unit as string, words as (content as string, boundingBox as double[], confidence as integer, span as (offset as integer, length as integer))[], selectionMarks as (state as string, boundingBox as double[], confidence as double, span as (offset as integer, length as integer))[], lines as (content as string, boundingBox as double[], spans as (offset as integer, length as integer)[])[], spans as (offset as integer, length as integer)[])[], tables as string[], styles as (isHandwritten as boolean, confidence as integer, spans as (offset as integer, length as integer)[])[], documents as (docType as string, boundingRegions as (pageNumber as integer, boundingBox as integer[])[], fields as ({ip-cd_distrito} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {ip-cd_concelho} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {ip-cd_freguesia} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc-rua} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc-n_lote} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc-lugar} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc-cod_postal} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc-localidade} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[])), confidence as double, spans as (offset as integer, length as integer)[])[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source1",
				"source1 foldDown(unroll(analyzeResult.documents),",
				"     mapColumn(",
				"          DS_CD_DISTRITO = analyzeResult.documents.fields.{ip-cd_distrito}.content,",
				"          DS_CD_CONCELHO = analyzeResult.documents.fields.{ip-cd_concelho}.content,",
				"          DS_CD_FREGUESIA = analyzeResult.documents.fields.{ip-cd_freguesia}.content,",
				"          DS_RUA = analyzeResult.documents.fields.{loc-rua}.content,",
				"          DS_LOTE = analyzeResult.documents.fields.{loc-n_lote}.content,",
				"          DS_LUGAR = analyzeResult.documents.fields.{loc-lugar}.content,",
				"          DS_CODIGO_POSTAL = analyzeResult.documents.fields.{loc-cod_postal}.content,",
				"          DS_LOCALIDADE = analyzeResult.documents.fields.{loc-localidade}.content,",
				"          DS_CD_DISTRITO_CONF = analyzeResult.documents.fields.{ip-cd_distrito}.confidence,",
				"          DS_CD_CONCELHO_CONF = analyzeResult.documents.fields.{ip-cd_concelho}.confidence,",
				"          DS_CD_FREGUESIA_CONF = analyzeResult.documents.fields.{ip-cd_freguesia}.confidence,",
				"          DS_RUA_CONF = analyzeResult.documents.fields.{loc-rua}.confidence,",
				"          DS_LOTE_CONF = analyzeResult.documents.fields.{loc-n_lote}.confidence,",
				"          DS_LUGAR_CONF = analyzeResult.documents.fields.{loc-lugar}.confidence,",
				"          DS_CODIGO_POSTAL_CONF = analyzeResult.documents.fields.{loc-cod_postal}.confidence,",
				"          DS_LOCALIDADE_CONF = analyzeResult.documents.fields.{loc-localidade}.confidence",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          ID_CHAVE_DE_NEGOCIO as string,",
				"          DS_CD_DISTRITO as string,",
				"          DS_CD_DISTRITO_CONF as decimal(10,2),",
				"          DS_CD_CONCELHO as string,",
				"          DS_CD_CONCELHO_CONF as decimal(10,2),",
				"          DS_CD_FREGUESIA as string,",
				"          DS_CD_FREGUESIA_CONF as decimal(10,2),",
				"          DS_RUA as string,",
				"          DS_RUA_CONF as decimal(10,2),",
				"          DS_LOTE as string,",
				"          DS_LOTE_CONF as decimal(10,2),",
				"          DS_LUGAR as string,",
				"          DS_LUGAR_CONF as decimal(10,2),",
				"          DS_CODIGO_POSTAL as string,",
				"          DS_CODIGO_POSTAL_CONF as decimal(10,2),",
				"          DS_LOCALIDADE as string,",
				"          DS_LOCALIDADE_CONF as decimal(10,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          DS_CD_DISTRITO,",
				"          DS_CD_DISTRITO_CONF,",
				"          DS_CD_CONCELHO,",
				"          DS_CD_CONCELHO_CONF,",
				"          DS_CD_FREGUESIA,",
				"          DS_CD_FREGUESIA_CONF,",
				"          DS_RUA,",
				"          DS_RUA_CONF,",
				"          DS_LOTE,",
				"          DS_LOTE_CONF,",
				"          DS_LUGAR,",
				"          DS_LUGAR_CONF,",
				"          DS_CODIGO_POSTAL,",
				"          DS_CODIGO_POSTAL_CONF,",
				"          DS_LOCALIDADE,",
				"          DS_LOCALIDADE_CONF",
				"     )) ~> sink1"
			]
		}
	}
}