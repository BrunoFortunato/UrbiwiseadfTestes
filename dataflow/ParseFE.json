{
	"name": "ParseFE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json3",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SqlServerTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          status as string,",
				"          createdDateTime as string,",
				"          lastUpdatedDateTime as string,",
				"          analyzeResult as (apiVersion as string, modelId as string, stringIndexType as string, content as string, pages as (pageNumber as integer, angle as integer, width as double, height as integer, unit as string, words as (content as string, boundingBox as double[], confidence as integer, span as (offset as integer, length as integer))[], selectionMarks as string[], lines as (content as string, boundingBox as double[], spans as (offset as integer, length as integer)[])[], spans as (offset as integer, length as integer)[])[], tables as (rowCount as integer, columnCount as integer, cells as (kind as string, rowIndex as integer, columnIndex as integer, rowSpan as integer, columnSpan as integer, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[])[], boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[])[], styles as string[], documents as (docType as string, boundingRegions as (pageNumber as integer, boundingBox as integer[])[], fields as ({req-nome} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {tr-tlf} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc_imo-gps1} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {tr-ndgeg} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {req-morada} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc_imo-entrada1} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {tr-email} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc_imo-gps2} as (type as string, confidence as double), {loc_imo-freguesia} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc_imo-distrito} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {tr-nome} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {req-email} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {req-nif_nipc} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {req-tlf} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {req-cpostal} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc_imo-entrada2} as (type as string, confidence as double), {req-assinatura} as (type as string, confidence as double), {tr-nif} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), {loc_imo-concelho} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], confidence as double, spans as (offset as integer, length as integer)[]), tbl_inst_eletrica as (type as string, valueArray as (type as string, valueObject as ({ie-tipo_insta} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-entrada_imo} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-ramal} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-nip} as (type as string), {ie-cpe} as (type as string), {ie-andar} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-fracao} as (type as string), {ie-tipo_util} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-entrada} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-total_instal} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-fator_simult} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[]), {ie-potencia} as (type as string, valueString as string, content as string, boundingRegions as (pageNumber as integer, boundingBox as double[])[], spans as (offset as integer, length as integer)[])))[])), confidence as double, spans as (offset as integer, length as integer)[])[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     documentForm: 'arrayOfDocuments') ~> source1",
				"source1 foldDown(unroll(analyzeResult.documents),",
				"     mapColumn(",
				"          DS_RQ_NOME = analyzeResult.documents.fields.{req-nome}.content,",
				"          VL_RQ_NIF = analyzeResult.documents.fields.{req-nif_nipc}.content,",
				"          VL_RQ_TELEFONE = analyzeResult.documents.fields.{req-tlf}.content,",
				"          DS_RQ_EMAIL = analyzeResult.documents.fields.{req-email}.content,",
				"          VL_RQ_MORADA = analyzeResult.documents.fields.{req-morada}.content,",
				"          VL_RQ_CODIGO_POSTAL = analyzeResult.documents.fields.{req-cpostal}.content,",
				"          DS_RQ_ASSINATURA = analyzeResult.documents.fields.{req-assinatura}.type,",
				"          DS_TR_NOME = analyzeResult.documents.fields.{tr-nome}.content,",
				"          VL_TR_NIF = analyzeResult.documents.fields.{tr-nif}.content,",
				"          VL_TR_TELEFONE = analyzeResult.documents.fields.{tr-tlf}.content,",
				"          DS_TR_EMAIL = analyzeResult.documents.fields.{tr-email}.content,",
				"          VL_TR_NDGEG = analyzeResult.documents.fields.{tr-ndgeg}.content,",
				"          DS_RQ_NOME_CONF = analyzeResult.documents.fields.{req-nome}.confidence,",
				"          VL_RQ_NIF_CONF = analyzeResult.documents.fields.{req-nif_nipc}.confidence,",
				"          VL_RQ_TELEFONE_CONF = analyzeResult.documents.fields.{req-tlf}.confidence,",
				"          VL_RQ_EMAIL_CONF = analyzeResult.documents.fields.{req-email}.confidence,",
				"          VL_RQ_MORADA_CONF = analyzeResult.documents.fields.{req-morada}.confidence,",
				"          VL_RQ_CODIGO_POSTAL_CONF = analyzeResult.documents.fields.{req-cpostal}.confidence,",
				"          VL_RQ_ASSINATURA_conf = analyzeResult.documents.fields.{req-assinatura}.confidence,",
				"          VL_TR_NOME_CONF = analyzeResult.documents.fields.{tr-nome}.confidence,",
				"          VL_TR_NIF_CONF = analyzeResult.documents.fields.{tr-nif}.confidence,",
				"          VL_TR_TELEFONE_CONF = analyzeResult.documents.fields.{tr-tlf}.confidence,",
				"          VL_TR_EMAIL_CONF = analyzeResult.documents.fields.{tr-email}.confidence,",
				"          VL_TR_NDGEG_CONF = analyzeResult.documents.fields.{tr-ndgeg}.confidence,",
				"          DS_FREGUESIA = analyzeResult.documents.fields.{loc_imo-freguesia}.content,",
				"          DS_FREGUESIA_CONF = analyzeResult.documents.fields.{loc_imo-freguesia}.confidence,",
				"          DS_CONCELHO = analyzeResult.documents.fields.{loc_imo-concelho}.content,",
				"          DS_CONCELHO_CONF = analyzeResult.documents.fields.{loc_imo-concelho}.confidence,",
				"          DS_DISTRITO = analyzeResult.documents.fields.{loc_imo-distrito}.content,",
				"          DS_DISTRITO_CONF = analyzeResult.documents.fields.{loc_imo-distrito}.confidence,",
				"          DS_ENTRADA_E1 = analyzeResult.documents.fields.{loc_imo-entrada1}.content,",
				"          DS_ENTRADA_E1_CONF = analyzeResult.documents.fields.{loc_imo-entrada1}.confidence,",
				"          DS_ENTRADA_E2 = analyzeResult.documents.fields.{loc_imo-entrada1}.content,",
				"          DS_ENTRADA_E2_CONF = analyzeResult.documents.fields.{loc_imo-entrada2}.confidence,",
				"          VL_COORDENADAS = analyzeResult.documents.fields.{loc_imo-gps1}.content,",
				"          {[VL_COORDENADAS_CONF} = analyzeResult.documents.fields.{loc_imo-gps1}.confidence,",
				"          tbl_inst_eletrica_vl = analyzeResult.documents.fields.tbl_inst_eletrica.valueArray.valueObject,",
				"          each(match(iifNull(analyzeResult.documents.fields.{req-assinatura}.type, 0, 1)),",
				"               exemplo = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(tbl_inst_eletrica_vl),",
				"     mapColumn(",
				"          DS_RQ_NOME,",
				"          VL_RQ_NIF,",
				"          VL_RQ_TELEFONE,",
				"          DS_RQ_EMAIL,",
				"          VL_RQ_MORADA,",
				"          VL_RQ_CODIGO_POSTAL,",
				"          DS_RQ_ASSINATURA,",
				"          DS_TR_NOME,",
				"          VL_TR_NIF,",
				"          VL_TR_TELEFONE,",
				"          DS_TR_EMAIL,",
				"          VL_TR_NDGEG,",
				"          DS_RQ_NOME_CONF,",
				"          VL_RQ_NIF_CONF,",
				"          VL_RQ_TELEFONE_CONF,",
				"          VL_RQ_EMAIL_CONF,",
				"          VL_RQ_MORADA_CONF,",
				"          VL_RQ_CODIGO_POSTAL_CONF,",
				"          VL_RQ_ASSINATURA_conf,",
				"          VL_TR_NOME_CONF,",
				"          VL_TR_NIF_CONF,",
				"          VL_TR_TELEFONE_CONF,",
				"          VL_TR_EMAIL_CONF,",
				"          VL_TR_NDGEG_CONF,",
				"          DS_FREGUESIA,",
				"          DS_FREGUESIA_CONF,",
				"          DS_CONCELHO,",
				"          DS_CONCELHO_CONF,",
				"          DS_DISTRITO,",
				"          DS_DISTRITO_CONF,",
				"          DS_ENTRADA_E1,",
				"          DS_ENTRADA_E1_CONF,",
				"          DS_ENTRADA_E2,",
				"          DS_ENTRADA_E2_CONF,",
				"          VL_COORDENADAS,",
				"          VL_COORDENADAS_CONF = {[VL_COORDENADAS_CONF},",
				"          DS_TIPO_DE_INSTALACAO = tbl_inst_eletrica_vl.{ie-tipo_insta}.content,",
				"          DS_ENTRADA_DO_IMOVEL = tbl_inst_eletrica_vl.{ie-entrada_imo}.content,",
				"          DS_ANDAR = tbl_inst_eletrica_vl.{ie-andar}.content,",
				"          {DS_FRACÇAO} = tbl_inst_eletrica_vl.{ie-fracao}.type,",
				"          VL_POTENCIA_ALIMENTAR = tbl_inst_eletrica_vl.{ie-potencia}.content,",
				"          VL_NIP = tbl_inst_eletrica_vl.{ie-nip}.type,",
				"          DS_CPE = tbl_inst_eletrica_vl.{ie-cpe}.type,",
				"          VL_TOTAL_INSTALADO = tbl_inst_eletrica_vl.{ie-total_instal}.content,",
				"          DS_ENTRADA = tbl_inst_eletrica_vl.{ie-entrada}.content,",
				"          VL_RAMAL = tbl_inst_eletrica_vl.{ie-ramal}.content,",
				"          {DS_TIPO_DE_ULITIZAÇAO_INDIVIDUAL} = tbl_inst_eletrica_vl.{ie-tipo_util}.content,",
				"          VL_FATOR_DE_SIMULTANEADADE = tbl_inst_eletrica_vl.{ie-fator_simult}.content",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          ID_CHAVE_DE_NEGOCIO as string,",
				"          DS_RQ_NOME as string,",
				"          VL_RQ_NOME_CONF as decimal(10,2),",
				"          VL_RQ_NIF as string,",
				"          VL_RQ_NIF_CONF as decimal(10,2),",
				"          VL_RQ_TELEFONE as string,",
				"          VL_RQ_TELEFONE_CONF as decimal(10,2),",
				"          DS_RQ_EMAIL as string,",
				"          VL_RQ_EMAIL_CONF as decimal(10,2),",
				"          VL_RQ_MORADA as string,",
				"          VL_RQ_MORADA_CONF as decimal(10,2),",
				"          VL_RQ_CODIGO_POSTAL as string,",
				"          VL_RQ_CODIGO_POSTAL_CONF as decimal(10,2),",
				"          DS_RQ_ASSINATURA as string,",
				"          VL_RQ_ASSINATURA_conf as decimal(10,2),",
				"          DS_TR_NOME as string,",
				"          VL_TR_NOME_CONF as decimal(10,2),",
				"          VL_TR_NIF as string,",
				"          VL_TR_NIF_CONF as decimal(10,2),",
				"          VL_TR_TELEFONE as string,",
				"          VL_TR_TELEFONE_CONF as decimal(10,2),",
				"          DS_TR_EMAIL as string,",
				"          VL_TR_EMAIL_CONF as decimal(10,2),",
				"          VL_TR_NDGEG as string,",
				"          VL_TR_NDGEG_CONF as decimal(10,2),",
				"          DS_DISTRITO as string,",
				"          DS_DISTRITO_CONF as decimal(10,2),",
				"          DS_CONCELHO as string,",
				"          DS_CONCELHO_CONF as decimal(10,2),",
				"          DS_FREGUESIA as string,",
				"          DS_FREGUESIA_CONF as decimal(10,2),",
				"          DS_ENTRADA_E1 as string,",
				"          DS_ENTRADA_E1_CONF as decimal(10,2),",
				"          DS_ENTRADA_E2 as string,",
				"          DS_ENTRADA_E2_CONF as decimal(10,2),",
				"          VL_COORDENADAS as string,",
				"          VL_COORDENADAS_CONF as decimal(10,2),",
				"          DS_TIPO_DE_INSTALACAO as string,",
				"          DS_ENTRADA_DO_IMOVEL as string,",
				"          VL_RAMAL as string,",
				"          VL_NIP as string,",
				"          DS_CPE as string,",
				"          DS_ANDAR as string,",
				"          {DS_FRACÇAO} as string,",
				"          {DS_TIPO_DE_ULITIZAÇAO_INDIVIDUAL} as string,",
				"          DS_ENTRADA as string,",
				"          VL_TOTAL_INSTALADO as string,",
				"          VL_FATOR_DE_SIMULTANEADADE as string,",
				"          VL_POTENCIA_ALIMENTAR as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          DS_RQ_NOME,",
				"          VL_RQ_NOME_CONF = DS_RQ_NOME_CONF,",
				"          VL_RQ_NIF,",
				"          VL_RQ_NIF_CONF,",
				"          VL_RQ_TELEFONE,",
				"          VL_RQ_TELEFONE_CONF,",
				"          DS_RQ_EMAIL,",
				"          VL_RQ_EMAIL_CONF,",
				"          VL_RQ_MORADA,",
				"          VL_RQ_MORADA_CONF,",
				"          VL_RQ_CODIGO_POSTAL,",
				"          VL_RQ_CODIGO_POSTAL_CONF,",
				"          DS_RQ_ASSINATURA,",
				"          VL_RQ_ASSINATURA_conf,",
				"          DS_TR_NOME,",
				"          VL_TR_NOME_CONF,",
				"          VL_TR_NIF,",
				"          VL_TR_NIF_CONF,",
				"          VL_TR_TELEFONE,",
				"          VL_TR_TELEFONE_CONF,",
				"          DS_TR_EMAIL,",
				"          VL_TR_EMAIL_CONF,",
				"          VL_TR_NDGEG,",
				"          VL_TR_NDGEG_CONF,",
				"          DS_DISTRITO,",
				"          DS_DISTRITO_CONF,",
				"          DS_CONCELHO,",
				"          DS_CONCELHO_CONF,",
				"          DS_FREGUESIA,",
				"          DS_FREGUESIA_CONF,",
				"          DS_ENTRADA_E1,",
				"          DS_ENTRADA_E1_CONF,",
				"          DS_ENTRADA_E2,",
				"          DS_ENTRADA_E2_CONF,",
				"          VL_COORDENADAS,",
				"          VL_COORDENADAS_CONF,",
				"          DS_TIPO_DE_INSTALACAO,",
				"          DS_ENTRADA_DO_IMOVEL,",
				"          VL_RAMAL,",
				"          VL_NIP,",
				"          DS_CPE,",
				"          DS_ANDAR,",
				"          {DS_FRACÇAO},",
				"          {DS_TIPO_DE_ULITIZAÇAO_INDIVIDUAL},",
				"          DS_ENTRADA,",
				"          VL_TOTAL_INSTALADO,",
				"          VL_FATOR_DE_SIMULTANEADADE,",
				"          VL_POTENCIA_ALIMENTAR",
				"     )) ~> sink1"
			]
		}
	}
}